사용하는 쿼리들
tokencheck
gettime
getworktime
setregister
getregister
update
getstaff
insert2
insert

ssh qkrtmfqls@qkrtmfqls.gabia.io
호스팅 접속

리액트 예제들
https://reactjsexample.com/customizable-and-responsive-react-sidebar-library-with-dropdown-menus/

호스팅 접속안되면 차단된 아이피 확인하기

직업



//시민 - > 출퇴근 누르면 
//시민은 할수없습니다.

회원가입 관리 기능 다 만들고나서
아이디 닉네임
work 0이면 출근상태 1이면 퇴근 end는 퇴근시간 
worktime - > 퇴근시간 - 출근시간해서 일한시간
개인마다 worktime 다 찾아서 더해서 총 일한시간 표시
관리자페이지에서 직업별(닉네임)으로 정리해서 일한시간을 총합시간으로 


호스팅 비용 - > 개별

회원가입
로그인
출퇴근
직업 기본 2명
직업 추가당 2만원
-- > 10만원

관리자페이지 추가시
-- > 5만원

관리자 페이지 기능별 개당
-- >  3만원

추가 기능
-- > 상의 후 결정

소스
-- > 100만원 기능별로 바뀜 






관리자로 로그인하면 관리자페이지 버튼 생기게 

직업 버튼 누르면 뜨는것들
    출근 , 퇴근
    총 일한 시간
    출근중 , 퇴근중 인사람 볼수있게
    관리자면 전부 다 누를수있게

스태프 창에 들어가면 뜨는것들
    디컨추노
    경고횟수

경찰 창에 들어가면 뜨는것들
    X

EMS 창에 들어가면 뜨는것들
    X



관리자 페이지
1. 회원가입 승인만들기 
    --> 닉네임은 변동가능하게
2. 밴처리
    -- > 게임내 연동
    -- > 서버쿼리를 봐야 알수있음
3. 직업별로 근무시간 직업별로 출근중인사람 출근중인사람 강제퇴근 할수있게
    --> 관리자페이지에서 
4. 관리자페이지에서는 해당 유저 총 근무시간 , 강제퇴근 버튼
    --> 출근중인사람 , 퇴근중인사람 따로따로 보이게

관전을 하는데 게임을 접속도 안했는데 게임화면을 볼수있다 이건 말이안된다.
롤이 안깔려있는데 관전이 되겠냐 
결국엔 그냥 서버컴퓨터로 게임을 켜서 그화면을 웹에서 보여주는거지
뭐든지 저게 깔려있었을거야 화면공유식인것같은데?

동영상으로 말고

. 회원탈퇴 나중에


//디스코드 연동은 나중에 생각하자
-- 디스코드 연동 기능
    디컨추노? 그게 뭔데 시발
    경고횟수? ㅇㅇ  
    구금 버튼을 디스코드에서만 




https://m.blog.naver.com/sejun3278/221569640649
참고 사이트
npm run build
npm run deploy

### 로그인 토큰
https://velog.io/@denmark-choco/GoogleLogin-%ED%9B%84-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0


# Product Name
> Short blurb about what your product does.

[![NPM Version][npm-image]][npm-url]
[![Build Status][travis-image]][travis-url]
[![Downloads Stats][npm-downloads]][npm-url]

One to two paragraph statement about your product and what it does.

![](header.png)

## Installation

OS X & Linux:

```sh
npm install my-crazy-module --save
```

Windows:

```sh
edit autoexec.bat
```

## Usage example

A few motivating and useful examples of how your product can be used. Spice this up with code blocks and potentially more screenshots.

_For more examples and usage, please refer to the [Wiki][wiki]._

## Development setup

Describe how to install all development dependencies and how to run an automated test-suite of some kind. Potentially do this for multiple platforms.

```sh
make install
npm test
```

## Release History

* 0.2.1
    * CHANGE: Update docs (module code remains unchanged)
* 0.2.0
    * CHANGE: Remove `setDefaultXYZ()`
    * ADD: Add `init()`
* 0.1.1
    * FIX: Crash when calling `baz()` (Thanks @GenerousContributorName!)
* 0.1.0
    * The first proper release
    * CHANGE: Rename `foo()` to `bar()`
* 0.0.1
    * Work in progress

## Meta

Your Name – [@YourTwitter](https://twitter.com/dbader_org) – YourEmail@example.com

Distributed under the XYZ license. See ``LICENSE`` for more information.

[https://github.com/yourname/github-link](https://github.com/dbader/)

## Contributing

1. Fork it (<https://github.com/yourname/yourproject/fork>)
2. Create your feature branch (`git checkout -b feature/fooBar`)
3. Commit your changes (`git commit -am 'Add some fooBar'`)
4. Push to the branch (`git push origin feature/fooBar`)
5. Create a new Pull Request

<!-- Markdown link & img dfn's -->
[npm-image]: https://img.shields.io/npm/v/datadog-metrics.svg?style=flat-square
[npm-url]: https://npmjs.org/package/datadog-metrics
[npm-downloads]: https://img.shields.io/npm/dm/datadog-metrics.svg?style=flat-square
[travis-image]: https://img.shields.io/travis/dbader/node-datadog-metrics/master.svg?style=flat-square
[travis-url]: https://travis-ci.org/dbader/node-datadog-metrics
[wiki]: https://github.com/yourname/yourproject/wiki

