{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Todolist","useState","todo","setTodo","todos","setTodos","idvalue","setidvalue","count","setcount","className","Todolists","toggleTodo","id","newTodos","find","complete","onChange","e","target","value","type","onClick","preventDefault","prevTodos","text","filter","length","map","Todo","checked","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAcA,SAASA,IACP,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAyBF,mBAAS,IAAlC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA6BJ,mBAAS,GAAtC,mBAAOK,EAAP,KAAeC,EAAf,KACI,EAAmBN,mBAAS,GAAhC,mBAAKO,EAAL,KAAWC,EAAX,KA6BF,OACI,sBAAKC,UAAW,WAAhB,UACE,8CACA,cAACC,EAAD,CAAWP,MAASA,EAAOQ,WATd,SAAAC,GACjB,IAAMC,EAAQ,YAAOV,GACfF,EAAOY,EAASC,MAAK,SAAAb,GAAI,OAAIA,EAAKW,KAAOA,KAC/CX,EAAKc,UAAYd,EAAKc,SACtBX,EAASS,MAML,uBAAQG,SAhCS,SAACC,GACpBf,EAAQe,EAAEC,OAAOC,QA+BiBA,MAAOlB,IACvC,uBAAOmB,KAAK,SAASD,MAAM,eAAKE,QA7BrB,SAACJ,GACdT,EAASD,EAAM,GACfD,EAAWD,EAAQ,GACnBY,EAAEK,iBACW,KAATrB,IACLG,GAAS,SAAAmB,GACR,MAAM,GAAN,mBAAWA,GAAX,CACA,CAAEX,GAAIP,EAASmB,KAAMvB,EAAMc,UAAS,QAEpCb,EAAQ,QAqBN,wBAAQmB,QAlBQ,SAACJ,GACnB,IAAMJ,EAAWV,EAAMsB,QAAO,SAAAxB,GAAI,OAAKA,EAAKc,YAC5CP,EAASK,EAASa,QAClBtB,EAASS,IAeP,uCACA,+BAAI,uBAAJ,2CACaN,QAMnB,SAASG,EAAT,GAAwC,IAApBP,EAAmB,EAAnBA,MAAMQ,EAAa,EAAbA,WACxB,OACER,EAAMwB,KAAI,SAAA1B,GACN,OAAO,cAAC2B,EAAD,CAEHjB,WAAYA,EACZV,KAAMA,GAFDA,EAAKW,OAOtB,SAASgB,EAAT,GAAqC,IAArB3B,EAAoB,EAApBA,KAAMU,EAAc,EAAdA,WAKpB,OACI,8BACI,+BACI,uBAAOS,KAAK,WAAUS,QAAS5B,EAAKc,SAASC,SAPjC,WACtBc,QAAQC,IAAI9B,EAAKW,IACfD,EAAWV,EAAKW,OAMPX,EAAKuB,OAFAvB,EAAKW,MAQVoB,MAlFf,WACE,OACA,qBAAKvB,UAAU,MAAf,SACE,cAACV,EAAD,OCIWkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6365ce6.chunk.js","sourcesContent":["// eslint-disalbe\n\nimport React,{useState} from'react';\nimport './App.css';\n\nfunction App() {\n  return(\n  <div className=\"App\">\n    <Todolist/>\n  </div>\n  );\n  \n}\n\nfunction Todolist(){\n  const [todo,setTodo] = useState(''); \n  const [todos,setTodos] = useState([]);\n  const [idvalue,setidvalue] = useState(1);\n  var [count,setcount] = useState(0);\n  const inputchanges = (e) => {\n    setTodo(e.target.value);\n  }\n\n  const addlist =(e)=>{\n    setcount(count+1);\n    setidvalue(idvalue+1);\n    e.preventDefault();\n    if (todo === \"\") return; // 입력없이 추가 버튼을 클릭하였을 때\n   setTodos(prevTodos => { // todos 에 새로운 원소 추가\n    return [...prevTodos,\n    { id: idvalue, text: todo, complete:false}\n    ]})\n    setTodo(\"\"); // todo 를 클리어 시킴\n  }\n\n  const clearbutton = (e) => {\n    const newTodos = todos.filter(todo => !todo.complete);\n    setcount(newTodos.length);\n    setTodos(newTodos);\n  }\n\nconst toggleTodo = id => {\n  const newTodos = [...todos]\n  const todo = newTodos.find(todo => todo.id === id)\n  todo.complete = !todo.complete\n  setTodos(newTodos)\n}\nreturn(\n    <div className =\"Todolist\">\n      <h3>할일</h3>\n      <Todolists todos = {todos} toggleTodo={toggleTodo}/>\n      <input  onChange={inputchanges} value={todo} ></input>\n      <input type=\"button\" value=\"추가\" onClick={addlist}></input>\n      <button onClick={clearbutton}>삭제 버튼</button>\n      <ls><br></br>\n        남은할일 개수 : {count}\n      </ls>\n    </div>\n  )\n}\n\nfunction Todolists({todos,toggleTodo}) {\n  return (\n    todos.map(todo => {\n        return <Todo\n            key={todo.id}\n            toggleTodo={toggleTodo}\n            todo={todo} />\n    })\n)\n}\n\nfunction Todo({ todo, toggleTodo }) {\n  const handleTodoClick = () => {\n    console.log(todo.id);\n      toggleTodo(todo.id)\n  }\n  return (\n      <div >\n          <li key= {todo.id}>\n              <input type=\"checkbox\"checked={todo.complete}onChange={handleTodoClick} />\n              {todo.text}\n          </li>\n      </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}